
function_pointer_debug:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x0000000000001070


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <printf@plt-0x10>:
    1020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <printf@plt>:
    1030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 4018 <printf@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   $0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001040 <malloc@plt>:
    1040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 4020 <malloc@GLIBC_2.2.5>
    1046:	68 01 00 00 00       	push   $0x1
    104b:	e9 d0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001050 <__isoc99_scanf@plt>:
    1050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 4028 <__isoc99_scanf@GLIBC_2.7>
    1056:	68 02 00 00 00       	push   $0x2
    105b:	e9 c0 ff ff ff       	jmp    1020 <_init+0x20>

Disassembly of section .plt.got:

0000000000001060 <__cxa_finalize@plt>:
    1060:	ff 25 92 2f 00 00    	jmp    *0x2f92(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1066:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000001070 <_start>:
    1070:	f3 0f 1e fa          	endbr64 
    1074:	31 ed                	xor    %ebp,%ebp
    1076:	49 89 d1             	mov    %rdx,%r9
    1079:	5e                   	pop    %rsi
    107a:	48 89 e2             	mov    %rsp,%rdx
    107d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1081:	50                   	push   %rax
    1082:	54                   	push   %rsp
    1083:	45 31 c0             	xor    %r8d,%r8d
    1086:	31 c9                	xor    %ecx,%ecx
    1088:	48 8d 3d 31 01 00 00 	lea    0x131(%rip),%rdi        # 11c0 <main>
    108f:	ff 15 43 2f 00 00    	call   *0x2f43(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.34>
    1095:	f4                   	hlt    
    1096:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    109d:	00 00 00 

00000000000010a0 <deregister_tm_clones>:
    10a0:	48 8d 3d a9 2f 00 00 	lea    0x2fa9(%rip),%rdi        # 4050 <__TMC_END__>
    10a7:	48 8d 05 a2 2f 00 00 	lea    0x2fa2(%rip),%rax        # 4050 <__TMC_END__>
    10ae:	48 39 f8             	cmp    %rdi,%rax
    10b1:	74 15                	je     10c8 <deregister_tm_clones+0x28>
    10b3:	48 8b 05 26 2f 00 00 	mov    0x2f26(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    10ba:	48 85 c0             	test   %rax,%rax
    10bd:	74 09                	je     10c8 <deregister_tm_clones+0x28>
    10bf:	ff e0                	jmp    *%rax
    10c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    10c8:	c3                   	ret    
    10c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000010d0 <register_tm_clones>:
    10d0:	48 8d 3d 79 2f 00 00 	lea    0x2f79(%rip),%rdi        # 4050 <__TMC_END__>
    10d7:	48 8d 35 72 2f 00 00 	lea    0x2f72(%rip),%rsi        # 4050 <__TMC_END__>
    10de:	48 29 fe             	sub    %rdi,%rsi
    10e1:	48 89 f0             	mov    %rsi,%rax
    10e4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    10e8:	48 c1 f8 03          	sar    $0x3,%rax
    10ec:	48 01 c6             	add    %rax,%rsi
    10ef:	48 d1 fe             	sar    %rsi
    10f2:	74 14                	je     1108 <register_tm_clones+0x38>
    10f4:	48 8b 05 f5 2e 00 00 	mov    0x2ef5(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable@Base>
    10fb:	48 85 c0             	test   %rax,%rax
    10fe:	74 08                	je     1108 <register_tm_clones+0x38>
    1100:	ff e0                	jmp    *%rax
    1102:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1108:	c3                   	ret    
    1109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001110 <__do_global_dtors_aux>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	80 3d 35 2f 00 00 00 	cmpb   $0x0,0x2f35(%rip)        # 4050 <__TMC_END__>
    111b:	75 2b                	jne    1148 <__do_global_dtors_aux+0x38>
    111d:	55                   	push   %rbp
    111e:	48 83 3d d2 2e 00 00 	cmpq   $0x0,0x2ed2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1125:	00 
    1126:	48 89 e5             	mov    %rsp,%rbp
    1129:	74 0c                	je     1137 <__do_global_dtors_aux+0x27>
    112b:	48 8b 3d 06 2f 00 00 	mov    0x2f06(%rip),%rdi        # 4038 <__dso_handle>
    1132:	e8 29 ff ff ff       	call   1060 <__cxa_finalize@plt>
    1137:	e8 64 ff ff ff       	call   10a0 <deregister_tm_clones>
    113c:	c6 05 0d 2f 00 00 01 	movb   $0x1,0x2f0d(%rip)        # 4050 <__TMC_END__>
    1143:	5d                   	pop    %rbp
    1144:	c3                   	ret    
    1145:	0f 1f 00             	nopl   (%rax)
    1148:	c3                   	ret    
    1149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001150 <frame_dummy>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	e9 77 ff ff ff       	jmp    10d0 <register_tm_clones>
    1159:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001160 <func1>:
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>


void func1(int a) {
    1160:	55                   	push   %rbp
    1161:	48 89 e5             	mov    %rsp,%rbp
    1164:	48 83 ec 10          	sub    $0x10,%rsp
    1168:	89 7d fc             	mov    %edi,-0x4(%rbp)
    printf("func1: %d\n", a);
    116b:	8b 75 fc             	mov    -0x4(%rbp),%esi
    116e:	48 8d 3d 8f 0e 00 00 	lea    0xe8f(%rip),%rdi        # 2004 <_IO_stdin_used+0x4>
    1175:	b0 00                	mov    $0x0,%al
    1177:	e8 b4 fe ff ff       	call   1030 <printf@plt>
}
    117c:	48 83 c4 10          	add    $0x10,%rsp
    1180:	5d                   	pop    %rbp
    1181:	c3                   	ret    
    1182:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    1189:	1f 84 00 00 00 00 00 

0000000000001190 <func2>:

void func2(int a) {
    1190:	55                   	push   %rbp
    1191:	48 89 e5             	mov    %rsp,%rbp
    1194:	48 83 ec 10          	sub    $0x10,%rsp
    1198:	89 7d fc             	mov    %edi,-0x4(%rbp)
    printf("func2: %d\n", a);
    119b:	8b 75 fc             	mov    -0x4(%rbp),%esi
    119e:	48 8d 3d 6a 0e 00 00 	lea    0xe6a(%rip),%rdi        # 200f <_IO_stdin_used+0xf>
    11a5:	b0 00                	mov    $0x0,%al
    11a7:	e8 84 fe ff ff       	call   1030 <printf@plt>
}
    11ac:	48 83 c4 10          	add    $0x10,%rsp
    11b0:	5d                   	pop    %rbp
    11b1:	c3                   	ret    
    11b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
    11b9:	1f 84 00 00 00 00 00 

00000000000011c0 <main>:
void (*Functions[2])(int) = {
    func1,
    func2
};

int main() {
    11c0:	55                   	push   %rbp
    11c1:	48 89 e5             	mov    %rsp,%rbp
    11c4:	48 83 ec 10          	sub    $0x10,%rsp
    11c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    int input;
    scanf("%d", &input);
    11cf:	48 8d 3d 44 0e 00 00 	lea    0xe44(%rip),%rdi        # 201a <_IO_stdin_used+0x1a>
    11d6:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
    11da:	b0 00                	mov    $0x0,%al
    11dc:	e8 6f fe ff ff       	call   1050 <__isoc99_scanf@plt>

    FuncState *state = malloc(sizeof(FuncState));
    11e1:	bf 10 00 00 00       	mov    $0x10,%edi
    11e6:	e8 55 fe ff ff       	call   1040 <malloc@plt>
    11eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (input == 0) {
    11ef:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
    11f3:	0f 85 1e 00 00 00    	jne    1217 <main+0x57>
        state->func = func1;
    11f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    11fd:	48 8d 0d 5c ff ff ff 	lea    -0xa4(%rip),%rcx        # 1160 <func1>
    1204:	48 89 08             	mov    %rcx,(%rax)
        state->arg = 0;
    1207:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    120b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    } else {
    1212:	e9 2a 00 00 00       	jmp    1241 <main+0x81>
        state->func = Functions[input%2];
    1217:	8b 45 f8             	mov    -0x8(%rbp),%eax
    121a:	b9 02 00 00 00       	mov    $0x2,%ecx
    121f:	99                   	cltd   
    1220:	f7 f9                	idiv   %ecx
    1222:	48 63 ca             	movslq %edx,%rcx
    1225:	48 8d 05 14 2e 00 00 	lea    0x2e14(%rip),%rax        # 4040 <Functions>
    122c:	48 8b 0c c8          	mov    (%rax,%rcx,8),%rcx
    1230:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1234:	48 89 08             	mov    %rcx,(%rax)
        state->arg = input;
    1237:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    123a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    123e:	89 48 08             	mov    %ecx,0x8(%rax)
    }
    (state->func)(state->arg);
    1241:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1245:	48 8b 00             	mov    (%rax),%rax
    1248:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    124c:	8b 79 08             	mov    0x8(%rcx),%edi
    124f:	ff d0                	call   *%rax

    return 0;
    1251:	31 c0                	xor    %eax,%eax
    1253:	48 83 c4 10          	add    $0x10,%rsp
    1257:	5d                   	pop    %rbp
    1258:	c3                   	ret    

Disassembly of section .fini:

000000000000125c <_fini>:
    125c:	f3 0f 1e fa          	endbr64 
    1260:	48 83 ec 08          	sub    $0x8,%rsp
    1264:	48 83 c4 08          	add    $0x8,%rsp
    1268:	c3                   	ret    
